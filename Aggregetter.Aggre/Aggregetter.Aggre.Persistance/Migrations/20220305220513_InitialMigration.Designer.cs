// <auto-generated />
using System;
using Aggregetter.Aggre.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aggregetter.Aggre.Persistance.Migrations
{
    [DbContext(typeof(AggreDbContext))]
    [Migration("20220305220513_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Aggregetter.Aggre.Domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ArticleSlug")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Endpoint")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OriginalBody")
                        .HasColumnType("text");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("tinytext");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("TranslatedBody")
                        .HasColumnType("text");

                    b.Property<string>("TranslatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TranslatedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TranslatedTitle")
                        .HasColumnType("tinytext");

                    b.HasKey("Id");

                    b.HasIndex("ArticleSlug");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Endpoint");

                    b.HasIndex("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProviderId", "CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Aggregetter.Aggre.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Aggregetter.Aggre.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Aggregetter.Aggre.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseAddress")
                        .HasColumnType("tinytext");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("tinytext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Aggregetter.Aggre.Domain.Entities.Article", b =>
                {
                    b.HasOne("Aggregetter.Aggre.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aggregetter.Aggre.Domain.Entities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Aggregetter.Aggre.Domain.Entities.Provider", b =>
                {
                    b.HasOne("Aggregetter.Aggre.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });
#pragma warning restore 612, 618
        }
    }
}
